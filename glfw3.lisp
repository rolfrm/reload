;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.7
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.
;(cffi:load-foreign-library '(:default "opengl32"))

(defpackage glfw (:use cl))
(in-package glfw)
(cffi:load-foreign-library '(:default "libglfw3"))

(defun export-all (&rest args)
  (loop for sym in (remove-if-not #'symbolp args) do
       (export sym)))

;;;SWIG wrapper code starts here
(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here

(export-all

 (defun gl-enum-value (enum)
   (cffi:foreign-enum-value '%gl:enum enum))

(cl:defconstant VERSION_MAJOR 3)

(cl:defconstant VERSION_MINOR 0)

(cl:defconstant VERSION_REVISION 0)

(cl:defconstant RELEASE 0)

(cl:defconstant PRESS 1)

(cl:defconstant REPEAT 2)

(cl:defconstant KEY_SPACE 32)

(cl:defconstant KEY_APOSTROPHE 39)

(cl:defconstant KEY_COMMA 44)

(cl:defconstant KEY_MINUS 45)

(cl:defconstant KEY_PERIOD 46)

(cl:defconstant KEY_SLASH 47)

(cl:defconstant KEY_0 48)

(cl:defconstant KEY_1 49)

(cl:defconstant KEY_2 50)

(cl:defconstant KEY_3 51)

(cl:defconstant KEY_4 52)

(cl:defconstant KEY_5 53)

(cl:defconstant KEY_6 54)

(cl:defconstant KEY_7 55)

(cl:defconstant KEY_8 56)

(cl:defconstant KEY_9 57)

(cl:defconstant KEY_SEMICOLON 59)

(cl:defconstant KEY_EQUAL 61)

(cl:defconstant KEY_A 65)

(cl:defconstant KEY_B 66)

(cl:defconstant KEY_C 67)

(cl:defconstant KEY_D 68)

(cl:defconstant KEY_E 69)

(cl:defconstant KEY_F 70)

(cl:defconstant KEY_G 71)

(cl:defconstant KEY_H 72)

(cl:defconstant KEY_I 73)

(cl:defconstant KEY_J 74)

(cl:defconstant KEY_K 75)

(cl:defconstant KEY_L 76)

(cl:defconstant KEY_M 77)

(cl:defconstant KEY_N 78)

(cl:defconstant KEY_O 79)

(cl:defconstant KEY_P 80)

(cl:defconstant KEY_Q 81)

(cl:defconstant KEY_R 82)

(cl:defconstant KEY_S 83)

(cl:defconstant KEY_T 84)

(cl:defconstant KEY_U 85)

(cl:defconstant KEY_V 86)

(cl:defconstant KEY_W 87)

(cl:defconstant KEY_X 88)

(cl:defconstant KEY_Y 89)

(cl:defconstant KEY_Z 90)

(cl:defconstant KEY_LEFT_BRACKET 91)

(cl:defconstant KEY_BACKSLASH 92)

(cl:defconstant KEY_RIGHT_BRACKET 93)

(cl:defconstant KEY_GRAVE_ACCENT 96)

(cl:defconstant KEY_WORLD_1 161)

(cl:defconstant KEY_WORLD_2 162)

(cl:defconstant KEY_ESCAPE 256)

(cl:defconstant KEY_ENTER 257)

(cl:defconstant KEY_TAB 258)

(cl:defconstant KEY_BACKSPACE 259)

(cl:defconstant KEY_INSERT 260)

(cl:defconstant KEY_DELETE 261)

(cl:defconstant KEY_RIGHT 262)

(cl:defconstant KEY_LEFT 263)

(cl:defconstant KEY_DOWN 264)

(cl:defconstant KEY_UP 265)

(cl:defconstant KEY_PAGE_UP 266)

(cl:defconstant KEY_PAGE_DOWN 267)

(cl:defconstant KEY_HOME 268)

(cl:defconstant KEY_END 269)

(cl:defconstant KEY_CAPS_LOCK 280)

(cl:defconstant KEY_SCROLL_LOCK 281)

(cl:defconstant KEY_NUM_LOCK 282)

(cl:defconstant KEY_PRINT_SCREEN 283)

(cl:defconstant KEY_PAUSE 284)

(cl:defconstant KEY_F1 290)

(cl:defconstant KEY_F2 291)

(cl:defconstant KEY_F3 292)

(cl:defconstant KEY_F4 293)

(cl:defconstant KEY_F5 294)

(cl:defconstant KEY_F6 295)

(cl:defconstant KEY_F7 296)

(cl:defconstant KEY_F8 297)

(cl:defconstant KEY_F9 298)

(cl:defconstant KEY_F10 299)

(cl:defconstant KEY_F11 300)

(cl:defconstant KEY_F12 301)

(cl:defconstant KEY_F13 302)

(cl:defconstant KEY_F14 303)

(cl:defconstant KEY_F15 304)

(cl:defconstant KEY_F16 305)

(cl:defconstant KEY_F17 306)

(cl:defconstant KEY_F18 307)

(cl:defconstant KEY_F19 308)

(cl:defconstant KEY_F20 309)

(cl:defconstant KEY_F21 310)

(cl:defconstant KEY_F22 311)

(cl:defconstant KEY_F23 312)

(cl:defconstant KEY_F24 313)

(cl:defconstant KEY_F25 314)

(cl:defconstant KEY_KP_0 320)

(cl:defconstant KEY_KP_1 321)

(cl:defconstant KEY_KP_2 322)

(cl:defconstant KEY_KP_3 323)

(cl:defconstant KEY_KP_4 324)

(cl:defconstant KEY_KP_5 325)

(cl:defconstant KEY_KP_6 326)

(cl:defconstant KEY_KP_7 327)

(cl:defconstant KEY_KP_8 328)

(cl:defconstant KEY_KP_9 329)

(cl:defconstant KEY_KP_DECIMAL 330)

(cl:defconstant KEY_KP_DIVIDE 331)

(cl:defconstant KEY_KP_MULTIPLY 332)

(cl:defconstant KEY_KP_SUBTRACT 333)

(cl:defconstant KEY_KP_ADD 334)

(cl:defconstant KEY_KP_ENTER 335)

(cl:defconstant KEY_KP_EQUAL 336)

(cl:defconstant KEY_LEFT_SHIFT 340)

(cl:defconstant KEY_LEFT_CONTROL 341)

(cl:defconstant KEY_LEFT_ALT 342)

(cl:defconstant KEY_LEFT_SUPER 343)

(cl:defconstant KEY_RIGHT_SHIFT 344)

(cl:defconstant KEY_RIGHT_CONTROL 345)

(cl:defconstant KEY_RIGHT_ALT 346)

(cl:defconstant KEY_RIGHT_SUPER 347)

(cl:defconstant KEY_MENU 348)

(cl:defconstant KEY_LAST 348)

(cl:defconstant KEY_ESC 256)

(cl:defconstant KEY_DEL 261)

(cl:defconstant KEY_PAGEUP 266)

(cl:defconstant KEY_PAGEDOWN 267)

(cl:defconstant KEY_KP_NUM_LOCK 282)

(cl:defconstant KEY_LCTRL 341)

(cl:defconstant KEY_LSHIFT 340)

(cl:defconstant KEY_LALT 342)

(cl:defconstant KEY_LSUPER 343)

(cl:defconstant KEY_RCTRL 345)

(cl:defconstant KEY_RSHIFT 344)

(cl:defconstant KEY_RALT 346)

(cl:defconstant KEY_RSUPER 347)

(cl:defconstant MOUSE_BUTTON_1 0)

(cl:defconstant MOUSE_BUTTON_2 1)

(cl:defconstant MOUSE_BUTTON_3 2)

(cl:defconstant MOUSE_BUTTON_4 3)

(cl:defconstant MOUSE_BUTTON_5 4)

(cl:defconstant MOUSE_BUTTON_6 5)

(cl:defconstant MOUSE_BUTTON_7 6)

(cl:defconstant MOUSE_BUTTON_8 7)

(cl:defconstant MOUSE_BUTTON_LAST 7)

(cl:defconstant MOUSE_BUTTON_LEFT 0)

(cl:defconstant MOUSE_BUTTON_RIGHT 1)

(cl:defconstant MOUSE_BUTTON_MIDDLE 2)

(cl:defconstant JOYSTICK_1 0)

(cl:defconstant JOYSTICK_2 1)

(cl:defconstant JOYSTICK_3 2)

(cl:defconstant JOYSTICK_4 3)

(cl:defconstant JOYSTICK_5 4)

(cl:defconstant JOYSTICK_6 5)

(cl:defconstant JOYSTICK_7 6)

(cl:defconstant JOYSTICK_8 7)

(cl:defconstant JOYSTICK_9 8)

(cl:defconstant JOYSTICK_10 9)

(cl:defconstant JOYSTICK_11 10)

(cl:defconstant JOYSTICK_12 11)

(cl:defconstant JOYSTICK_13 12)

(cl:defconstant JOYSTICK_14 13)

(cl:defconstant JOYSTICK_15 14)

(cl:defconstant JOYSTICK_16 15)

(cl:defconstant JOYSTICK_LAST 15)

(cl:defconstant NO_ERROR 0)

(cl:defconstant NOT_INITIALIZED #x00070001)

(cl:defconstant NO_CURRENT_CONTEXT #x00070002)

(cl:defconstant INVALID_ENUM #x00070003)

(cl:defconstant INVALID_VALUE #x00070004)

(cl:defconstant OUT_OF_MEMORY #x00070005)

(cl:defconstant API_UNAVAILABLE #x00070006)

(cl:defconstant VERSION_UNAVAILABLE #x00070007)

(cl:defconstant PLATFORM_ERROR #x00070008)

(cl:defconstant FORMAT_UNAVAILABLE #x00070009)

(cl:defconstant FOCUSED #x00020001)

(cl:defconstant ICONIFIED #x00020002)

(cl:defconstant RESIZABLE #x00022007)

(cl:defconstant VISIBLE #x00022008)

(cl:defconstant CONTEXT_REVISION #x00020004)

(cl:defconstant RED_BITS #x00021000)

(cl:defconstant GREEN_BITS #x00021001)

(cl:defconstant BLUE_BITS #x00021002)

(cl:defconstant ALPHA_BITS #x00021003)

(cl:defconstant DEPTH_BITS #x00021004)

(cl:defconstant STENCIL_BITS #x00021005)

(cl:defconstant ACCUM_RED_BITS #x00021006)

(cl:defconstant ACCUM_GREEN_BITS #x00021007)

(cl:defconstant ACCUM_BLUE_BITS #x00021008)

(cl:defconstant ACCUM_ALPHA_BITS #x00021009)

(cl:defconstant AUX_BUFFERS #x0002100A)

(cl:defconstant STEREO #x0002100B)

(cl:defconstant SAMPLES #x0002100C)

(cl:defconstant SRGB_CAPABLE #x0002100D)

(cl:defconstant CLIENT_API #x00022000)

(cl:defconstant CONTEXT_VERSION_MAJOR #x00022001)

(cl:defconstant CONTEXT_VERSION_MINOR #x00022002)

(cl:defconstant CONTEXT_ROBUSTNESS #x00022003)

(cl:defconstant OPENGL_FORWARD_COMPAT #x00022004)

(cl:defconstant OPENGL_DEBUG_CONTEXT #x00022005)

(cl:defconstant OPENGL_PROFILE #x00022006)

(cl:defconstant OPENGL_API #x00000001)

(cl:defconstant OPENGL_ES_API #x00000002)

(cl:defconstant NO_ROBUSTNESS #x00000000)

(cl:defconstant NO_RESET_NOTIFICATION #x00000001)

(cl:defconstant LOSE_CONTEXT_ON_RESET #x00000002)

(cl:defconstant OPENGL_NO_PROFILE #x00000000)

(cl:defconstant OPENGL_CORE_PROFILE #x00000001)

(cl:defconstant OPENGL_COMPAT_PROFILE #x00000002)

(cl:defconstant CURSOR_MODE #x00030001)

(cl:defconstant STICKY_KEYS #x00030002)

(cl:defconstant STICKY_MOUSE_BUTTONS #x00030003)

(cl:defconstant CURSOR_NORMAL #x00040001)

(cl:defconstant CURSOR_HIDDEN #x00040002)

(cl:defconstant CURSOR_CAPTURED #x00040003)

(cl:defconstant PRESENT #x00050001)

(cl:defconstant AXES #x00050002)

(cl:defconstant BUTTONS #x00050003)

(cl:defconstant GAMMA_RAMP_SIZE 256)

(cl:defconstant CONNECTED #x00061000)

(cl:defconstant DISCONNECTED #x00061001)

(cffi:defcstruct vidmode
	(width :int)
	(height :int)
	(redBits :int)
	(blueBits :int)
	(greenBits :int))

(cffi:defcstruct gammaramp
	(red :pointer)
	(green :pointer)
	(blue :pointer))

(cffi:defcfun ("glfwInit" Init) :int)

(cffi:defcfun ("glfwTerminate" Terminate) :void)

(cffi:defcfun ("glfwGetVersion" Get-Version) :void
  (major :pointer)
  (minor :pointer)
  (rev :pointer))

(cffi:defcfun ("glfwGetVersionString" Get-Version-String) :string)

(cffi:defcfun ("glfwSetErrorCallback" Set-Error-Callback) :void
  (cbfun :pointer))

(cffi:defcfun ("glfwGetMonitors" Get-Monitors) :pointer
  (count :pointer))

(cffi:defcfun ("glfwGetPrimaryMonitor" Get-Primary-Monitor) :pointer)

(cffi:defcfun ("glfwGetMonitorPos" Get-Monitor-Pos) :void
  (monitor :pointer)
  (xpos :pointer)
  (ypos :pointer))

(cffi:defcfun ("glfwGetMonitorPhysicalSize" Get-Monitor-Physical-Size) :void
  (monitor :pointer)
  (width :pointer)
  (height :pointer))

(cffi:defcfun ("glfwGetMonitorName" Get-Monitor-Name) :string
  (monitor :pointer))

(cffi:defcfun ("glfwSetMonitorCallback" Set-Monitor-Callback) :void
  (cbfun :pointer))

(cffi:defcfun ("glfwGetVideoModes" Get-Video-Modes) :pointer
  (monitor :pointer)
  (count :pointer))

(cffi:defcfun ("glfwGetVideoMode" Get-Video-Mode) vidmode
  (monitor :pointer))

(cffi:defcfun ("glfwSetGamma" Set-Gamma) :void
  (monitor :pointer)
  (gamma :float))

(cffi:defcfun ("glfwGetGammaRamp" Get-Gamma-Ramp) :void
  (monitor :pointer)
  (ramp :pointer))

(cffi:defcfun ("glfwSetGammaRamp" Set-Gamma-Ramp) :void
  (monitor :pointer)
  (ramp :pointer))

(cffi:defcfun ("glfwDefaultWindowHints" Default-Window-Hints) :void)

(cffi:defcfun ("glfwWindowHint" Window-Hint) :void
  (target :int)
  (hint :int))

(cffi:defcfun ("glfwCreateWindow" Create-Window) :pointer
  (width :int)
  (height :int)
  (title :string)
  (monitor :pointer)
  (share :pointer))

(cffi:defcfun ("glfwDestroyWindow" Destroy-Window) :void
  (window :pointer))

(cffi:defcfun ("glfwWindowShouldClose" Window-Should-Close) :int
  (window :pointer))

(cffi:defcfun ("glfwSetWindowShouldClose" Set-Window-Should-Close) :void
  (window :pointer)
  (value :int))

(cffi:defcfun ("glfwSetWindowTitle" Set-Window-Title) :void
  (window :pointer)
  (title :string))

(cffi:defcfun ("glfwGetWindowPos" %glfwGetWindowPos) :void
  (window :pointer)
  (xpos :pointer)
  (ypos :pointer))

(defun Get-Window-Pos (win)
    (cffi:with-foreign-pointer (x-ptr 4)
      (cffi:with-foreign-pointer (y-ptr 4)
	(%glfwGetWindowPos win x-ptr y-ptr)
	(list (cffi:mem-ref x-ptr :int 0) (cffi:mem-ref y-ptr :int 0)))))




(cffi:defcfun ("glfwSetWindowPos" Set-Window-Pos) :void
  (window :pointer)
  (xpos :int)
  (ypos :int))

(cffi:defcfun ("glfwGetWindowSize" Get-Window-Size-fcn) :void
  (window :pointer)
  (width :pointer)
  (height :pointer))

(defun get-window-size (win)
    (cffi:with-foreign-pointer (x-ptr 4)
      (cffi:with-foreign-pointer (y-ptr 4)
	(Get-Window-Size-fcn win x-ptr y-ptr)
	(values (cffi:mem-ref x-ptr :int 0) (cffi:mem-ref y-ptr :int 0)))))

(cffi:defcfun ("glfwSetWindowSize" Set-Window-Size) :void
  (window :pointer)
  (width :int)
  (height :int))

(cffi:defcfun ("glfwIconifyWindow" Iconify-Window) :void
  (window :pointer))

(cffi:defcfun ("glfwRestoreWindow" Restore-Window) :void
  (window :pointer))

(cffi:defcfun ("glfwShowWindow" Show-Window) :void
  (window :pointer))

(cffi:defcfun ("glfwHideWindow" Hide-Window) :void
  (window :pointer))

(cffi:defcfun ("glfwGetWindowMonitor" Get-Window-Monitor) :pointer
  (window :pointer))

(cffi:defcfun ("glfwGetWindowParam" Get-Window-Param) :int
  (window :pointer)
  (param :int))

(cffi:defcfun ("glfwSetWindowUserPointer" Set-Window-User-Pointer) :void
  (window :pointer)
  (pointer :pointer))

(cffi:defcfun ("glfwGetWindowUserPointer" Get-Window-User-Pointer) :pointer
  (window :pointer))

(cffi:defcfun ("glfwSetWindowPosCallback" Set-Window-Pos-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetWindowSizeCallback" Set-Window-Size-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetWindowCloseCallback" Set-Window-Close-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetWindowRefreshCallback" Set-Window-Refresh-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetWindowFocusCallback" Set-Window-Focus-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetWindowIconifyCallback" Set-Window-Iconify-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwPollEvents" Poll-Events) :void)

(cffi:defcfun ("glfwWaitEvents" Wait-Events) :void)

(cffi:defcfun ("glfwGetInputMode" Get-Input-Mode) :int
  (window :pointer)
  (mode :int))

(cffi:defcfun ("glfwSetInputMode" Set-Input-Mode) :void
  (window :pointer)
  (mode :int)
  (value :int))

(cffi:defcfun ("glfwGetKey" Get-Key) :int
  (window :pointer)
  (key :int))

(cffi:defcfun ("glfwGetMouseButton" Get-Mouse-Button) :int
  (window :pointer)
  (button :int))

(cffi:defcfun ("glfwGetCursorPos" Get-Cursor-Pos) :void
  (window :pointer)
  (xpos :pointer)
  (ypos :pointer))

(cffi:defcfun ("glfwSetCursorPos" Set-Cursor-Pos) :void
  (window :pointer)
  (xpos :int)
  (ypos :int))

(cffi:defcfun ("glfwSetKeyCallback" Set-Key-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetCharCallback" Set-Char-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetMouseButtonCallback" Set-Mouse-Button-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetCursorPosCallback" Set-Cursor-Pos-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetCursorEnterCallback" Set-Cursor-Enter-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwSetScrollCallback" Set-Scroll-Callback) :void
  (window :pointer)
  (cbfun :pointer))

(cffi:defcfun ("glfwGetJoystickParam" Get-Joystick-Param) :int
  (joy :int)
  (param :int))

(cffi:defcfun ("glfwGetJoystickAxes" Get-Joystick-Axes) :int
  (joy :int)
  (joystick-axes :pointer)
  (numaxes :int))

(cffi:defcfun ("glfwGetJoystickButtons" Get-Joystick-Buttons) :int
  (joy :int)
  (joystick-buttons :pointer)
  (numbuttons :int))

(cffi:defcfun ("glfwGetJoystickName" Get-Joystick-Name) :string
  (joy :int))

(cffi:defcfun ("glfwSetClipboardString" Set-Clipboard-String) :void
  (window :pointer)
  (string :string))

(cffi:defcfun ("glfwGetClipboardString" Get-Clipboard-String) :string
  (window :pointer))

(cffi:defcfun ("glfwGetTime" Get-Time) :double)

(cffi:defcfun ("glfwSetTime" Set-Time) :void
  (time :double))

(cffi:defcfun ("glfwMakeContextCurrent" Make-Context-Current) :void
  (window :pointer))

(cffi:defcfun ("glfwGetCurrentContext" Get-Current-Context) :pointer)

(cffi:defcfun ("glfwSwapBuffers" Swap-Buffers) :void
  (window :pointer))

(cffi:defcfun ("glfwSwapInterval" Swap-Interval) :void
  (interval :int))

(cffi:defcfun ("glfwExtensionSupported" Extension-Supported) :int
  (extension :string))

(cffi:defcfun ("glfwGetProcAddress" Get-Proc-Address) :pointer
  (procname :string))

(cffi:defcallback -print-error-cb :void ((error-string :pointer))
    (print (cffi:foreign-string-to-lisp error-string)))

)
