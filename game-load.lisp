(declaim (optimize (speed 0) (safety 3) (space 0) (debug 3)))
(load "~/quicklisp/setup.lisp")
(without-package-locks 
  (progn
    (mapcar (lambda (pkg) (print (time (ql:quickload pkg))))
	    '(alexandria bordeaux-threads cl-fad cl-cont cl-opengl l-math cl-glfw-ftgl cl-devil))
    (use-package 'alexandria)))
(load "test.lisp")
(defmacro comment (&body b)
  (declare (ignore b))
  )


 (load "reload-engine.lisp")
 (use-package :reload-engine)
(re.load "my-test.lisp")

(comment
(re.load "test.lisp")
 (re.load "reload-engine.lisp") 
 (re.load "threading.lisp")
 (use-package :reload-engine)
 (re.load "reflect.lisp")
 (re.load "utils.lisp")
 (use-package :reflect)
 (re.load "event.lisp")
 (use-package :event)
 (re.load "glfw3.lisp")
 (re.load "context-manager.lisp")
 (use-package :context-manager)
 (re.load "window.lisp")
 (use-package :window)
 (re.load "shader-program.lisp")
 (use-package :shader-program)
 (re.load "vertex-buffer.lisp")
 (use-package :vbo)
 (re.load "texture.lisp")
 (re.load "package-test.lisp")
 (re.load "with-package-macro/with-package.lisp")
 (use-package :with-package)
 (re.load "cl-enumerate/cl-enumerate.lisp")
 (re.load "lru-table.lisp")
 (re.load "item-manager.lisp")
 
 (re.load "matrix.lisp")
 (re.load "matrix-extra.lisp")
 (re.load "functional-tree.lisp")
 (re.load "functional-gui.lisp")
 (re.load "functional-gui-items2.lisp")
 (re.load "queue.lisp"))

					;(re.load "graph.lisp")
;(re.load "game1.lisp")
;(re.load "graph-demo.lisp")

